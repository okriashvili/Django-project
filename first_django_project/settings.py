"""
Django settings for first_django_project project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

# envirpn ვიყენებთ იმისათვის რომ შევქმნათ env ფაილი, სადაც უნდა შევინ ახოთ ისეთი ინფორმაცია რომელის ატვირთვა არ გვინდა ან სერვერზე ანდ გითჰაბზე,
# და env ფაილიდან უნდა წამოვიღოთ ეს მონაცემი ჩვენს პროექტში, ეს მიდგომა გამოიყენებს უსაფრთხოებისათვის

from pathlib import Path
# მას შემდეგ რაც დავაინსტალირებთ environ, პროექტში უნდა დავაიმპორტოთ ენვირონი
import environ
import os
# დაიმპორტების შემგედ კი env ცვალდი უნდა გამოვიყენოთ, რომელიც იძახებს Env კლასს
env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)
# ფუნქციონალი: DEBUG-ს წაიკითხავს და თუკი მითითებული არ იქნება, დეფაულტად falseს გაუწერს


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# env ფაილის წასაკითხად კი ვიყენებთ ამ მეთოდს
# environiდან ENV
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')
# SECURITY WARNING: don't run with debug turned on in production!

# მსგავსი მიდგომით ვიძახებთ env ფაილიდან მოიანცემს, ფრჩხილებში უნდა გადაცვეთ ის ცვლადი რომელიც შექმნილია env ფაილში და შემახულია მონაცემი
DEBUG = env('DEBUG')
# DEBUG გამოიყენება იმისათვის რომ პროექტის მიმდინარეობის შემთხვევაში თუკი რაიმე ერორი არ შეცდომა გვაქვს გამოიტანოს,
# აგრეთვე თუკი საიტი გავა ერორზე გამოიტანს საიტის ენდფოინთებს,
# Trueს ვიყენებთ მხოლოდ შექმიის ეტაპზე, ხოლო როდესაც საიტს ჩავუშვებთ სერვერზე, იგი უნდა გადავიყვანოთ Flaseზე,
# რათა მომხმარებელს წვდომა არ ქონდეს და არ გამოუტანოს ის შეცდომები და ერორები


# რადგანაც allowed_hosts არის ლისტი, env ის შემდეგ list უნდა გავუწეროთ
ALLOWED_HOSTS = env.list('ALLOWED_HOSTS')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # ჩვენი აპლიკაცია
    'store',
    'user',

    # დაიმპორტებული debug-toolbar ის აპლიკაცია
    'debug_toolbar',

    # crispy bootstrap ის აპლიკავეიბი
    'crispy_forms',
    'crispy_bootstrap5',
]


CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

ROOT_URLCONF = 'first_django_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'store.context_processors.global_settings',
            ],
        },
    },
]

WSGI_APPLICATION = 'first_django_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# პროექტის შექმნისას დეფაულტად ჯანგოს მოყვება db.sqlite3 მონაცემთა ბაზა, მაგრამ შეგვიძლია დავაკავშიროთ sql ბაზას ში უნდა შევუცვალოთ db.sqlite3 უნდა შეიცვალოს
# ამისათვის engine ში უნდა შევუცვალოთ db.sqlite3 უნდა შეიცვალოს postgresql
# და დავამატოთ name, user, password, host და port
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME' : env('DB_NAME'),
        'USER' : env('DB_USERS'),
        'PASSWORD' : env('DB_PASSWORD'),
        'HOST' : env('DB_HOST'),
        'PORT' : env('DB_PORT'),
    }
}
# NAME ში იწერება უშუალოდ SQL ის ბაზის სახელი რაც ჩვენ შევქმენით
# USER არის POSTGRES, უშუალოდ DATABASE ის
# PASSWORDში იწერება SQL ის ინსტალაციის დროს შექმნილი ჩვენი პაროლი
# ხოლო HOST კი localhost, რადგანაც ლოკალურ სერვერზეა ჩვენი მონაცემთა ბაზა
# PORT კი POSTGRESQL ის პორტის ნომერი

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ka'

TIME_ZONE = 'Asia/Tbilisi'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    BASE_DIR / 'static'
]

STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

INTERNAL_IPS = [
    "127.0.0.1",
]
