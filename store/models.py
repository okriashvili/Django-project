from django.db import models

# Create your models here.
# მოდელს ფაილს ვიყენებთ მონაცემების შესანახად
# უშუალოდ ამ ფაილიდან უნდა ვემუშავოთ მონაცემებს, რომელსაც შევინახავთ sql ბაზაში
# ამისათვის კი ვეყენებთ კლასებს
# კლასი კი უნდა გავხადოთ models მოდულის შვილობილი, და models მოდულიდან უნდა გამოვიძახოთ Model კლასი



# თუკი გვინდა ორი ცხრილის შექმნა და დაკავშირება მაშინ მოდელს ფაილშივე უნდა დავაკავშიროთ ისინი
class Category(models.Model):
    category_name = models.CharField(max_length=100, unique=True)
    # uniqueზე და სხვა constraintებს თავად დაამატებს ავტომატურად
    created = models.DateTimeField(auto_now_add=True)
    updated = models.DateTimeField(auto_now=True)

    class Meta:
        db_table = 'categories'
        verbose_name_plural = 'Category'

    def __str__(self):
        return self.category_name


class Product(models.Model):
    # კლასში უნდა შევქმნათ სვეტები, ისევე როგორც sql ბაზაში ვქმნიდით
    # განსხვავებით sql ბაზისა, არ გვჭირდება id ის გაწერა, რადგანაც ამას django ავტომატურად იზამს
    title = models.CharField(max_length=100)
    # varchar ის ნაცვლად გვაქვს charfield
    # models მოდულიდან უნდა გამოვიძახოთ field ები /
    price = models.DecimalField(max_digits=10, decimal_places=2)
    # decimal(ათწილადის ნაცვლად) არის decimalfield რომელსაც ფრჩხილებში გადაეცემა >>> და
    # რამდენ ციფრიანი უნდა იყოს და მძიმის შემდეგ რამდენი ციფრის ადგილი გამოყოს ათწილადისთვის (decimal_places)
    quantity = models.IntegerField()
    # თუკი სვეტის ცარიელი დატოვება გვინდა, მაგ რომელიმე სვეტის ცარიელი დატოვება თუ გვინდა მონაცემის შეყვანის გარეშე აუცილებელია მივუთითოთ რომ null იყოს True,
    description = models.TextField(null=True, blank=True)
    # ხოლო blank-true არის admin ფეიჯიდან როდესაც ჩვენ დავამატებთ პროდუქტს, მონაცემის შეყვანის გარეშე დაამატოს
    is_active = models.BooleanField(default=True)
    # boolean ის ნაცვლად გვაქვს booleanfield, და დეფაულტ მნიშვნელობის გადაცემა შეგვიძლია ფრჩხილებში
    # რადგანაც boolean ტიპის მონაცემი უნდა იყოს და defaultად არაფერს გადავცემთ, იქნება false და არა none
    # უნდა იყოს ან True ან False
    created_at = models.DateTimeField(auto_now_add=True)
    # date მონაცემის ნაცვლად არის date-timefield, და defaultად შეგვიძლია გადავცეთ auto_now_add ჩავურთოთ true,
    # რომელიც გადასცემს იმ თარიღს როდესაც რაღაც მონაცემი შეიქმნა.
    # current date ის ნაცვლად auto_now_add უნდა ჩავურთოთ Trueზე
    updated_at = models.DateTimeField(auto_now=True)
    # created_at ისგან განსხვავებით update_at ისთვის ვიყენებთ auto_now და არა auto_now_add
    # განსხვავება ისაა რომ, როდესაც დააიფდეითდება იმ თარითს შეინახავს და არა შექმის თარიღს

    # ამ მიდგომით შეგვიძლია ორი ცხრილი დავაკავშიროდთ ერთმანეთს, ისევე როგორც ვაკავშირედბით sql ბაზაში
    categories = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True, related_name='products')
    # მონაცემთა ტიპში უნდა გავუწეროთ ForeignKey რომელსაც ფრჩხილებში უნდა მივუთითოთ მეორე ცხრილის სახელი და წაშლის შემთხვევაში რა მოხდეს
    # ForeignKey არის one to many კავშირი

    image = models.ImageField(upload_to='product_images', null=True, blank=True, default="no_image.jpg")

    # views მოდელს ვოყენებთ იმისათვის რომ დავიჭიროთ პროდუქტების ნახვის მაჩვენებელიც, რამდენად ხშირად არის კონკრეტული პროდუქტი ნანახი
    # ამისათვის ვქმნით views რომელიც უნდა იყოს აუცილებლად დადებით რიცხვი, ხოლო იმისათვის რომ ადმინს არ შეეძლოს ამის ხელოვნურად შეცვლა,
    # შეგვიძლია admin.pyდან read_onlyში დავამატოთ views და ამ მონაცემის ნახვა შეეძლება მხოლოდ,
    views = models.PositiveIntegerField(default=0)
    # ხოლო, ნახვები ავტომატურად რომ გაიზარდოს უნდა გამოვიყენოთ middleware, ლოგიკის ასაწყობად ვიყენებთ middleware.pyს,
    # ხოლო ამ ლოგიკის ასამუშავებლად settings.pyში უნდა დავამატოთ middlewareს ლისტში





    class Meta:
        db_table = "product"
        verbose_name_plural = "Products"
# db_table ით შეგვიძლია ცხრილის სახელის შეცვლა
# verbose_name_plural - გამოიყენება სვეტების სახელის ჩასაწერად admin ფეიჯზე,

    def __str__(self):
        return f"{self.title} - {self.price}"
    # str მეთოდს ვიყენებთ სვეტებში მონაცემების შეტანისას სახელით რომ გამოჩნდეს ეს მონაცემი და არა ობიექტის მისამართით


# სვეტები შევქმენით მაგრამ იმისათვის რომ ეს სვეტები და მონაცემები ჩვენს მონაცემთა საცავში მოხვდეს ამისათვის უნდა შევქმნათ მიგრაციები, რომელიც ამ მონაცემებს წამოიღებს და შეიტანს sql ბაზაში
# მიგრაციების შესაქმნდელად კი Shell ან bash ან cmd ში უნდა გავუშვათ ბრძანება python manage.py makemigrations
# მიგრაცია არ შეიქმნა, იმიტომ რომ როდესაც შექმენით store აპი, settings.py ში არ ჩაგვიმატებია,

# მას შემდეგ რაც შევქმნით მიგრაციებს, პროექტშიც აისახება,
# შექმნის მიგრაციის ფოლდერს სადაც ჩვენი ყოველი შექმნილი მიგრაცია იქნება შენახული
# ყოველ ცვლილებაზე შეიქმნება ახალი ფაილი, რომელიც შეინახება migration ფოლდერში

# მიგრაცია შევქმენით მაგრამ, იმისათვის რომ ეს სვეტები და მონაცემები იქნეს შენახული ჩვენს sql ბაზაში, შემქნილი მიგრაცია უნდა გავუშვათ ბაზაში

# makemigrations შქმნის მიგრაცეიბს
# showmigrations კი გვანახებს ჩვენს შექმნილ მიგრაციებს
# migrate ბრძანებით კი გაეშვება მიგრაცია, მაგრამ ყველა მიგრაცია გაეშვება რაც djangoშია შექმნილი
# მაგრამ თუკი გვინდა რომ ჩვენი აპლიკაციის მიგრაციები გაეშვას უნდა გამოვიყენოთ migrate appp_name
# მიგრაცის გაშვებისას შეიქმება ორი ცხრილი ბაზაში, ერთი django_migration და store_product,
# store_product იმიტომ დაარქვა რომ აიღო აპლიკაციის სახელი და კლასის სახელი


# შეგვიძლია თუკი გაშვებული მიგრაციისს უკან დაბრუნება გვსურს, მიგრაციის გაშვებისას დავუწეროთ ციფრი, რომელიც მიგრაციებს შემქნისას მოყვება და ისევ ამ მიგრაციაზე დაბრუნდება აპლიკაცია,
# ამას ვიყენებთ იმ შემთხვევაში თუკი გაშვებული მიგრაცია არ მოგვწონს და ისევ უკან გვსურს დაბრუნება
# ცვალდში შევინახოთ all იდან წამორებული მონაცემი და ამ ცვლადზე გადავიაროთ for ციკლით
































